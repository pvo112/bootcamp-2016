x=sample(20)
sample(x, size=2)
x <-c(1, 5, 10, 45)
sample(x, size=2)
sample(x[1:3], size=2, replace=TRUE)
x=weq(50,60)
x=seq(50,60)
x[-2]
x[2:4]
x[c(2,4)]
x[-2]
x=1:10
y <- matrix(x, nrow=2, ncol=5)
y
y[2,]
y <- matrix(x, nrow=2, ncol=5, byrow=TRUE)
y
y <- matrix(x, nrow=2, ncol=5)
y
t(y)
x<- c(5, 3, 4, NA)
mean(x)
mean(x, na.rm=TRUE) #allows ignore the NA value and still perform function
Expenses <- house + food +fun
Expenses
bankAccounts[i] <- bankAccounts[i] + income[i] - Expenses[i]
bankAccounts
bankAccounts <- c(10, 9.2, 5.6)
for (j in 1:5) {
for (i in 1:length(bankAccounts)) {
bankAccounts[i] <- bankAccounts[i] + income[i] - Expenses[i] }
}
z<-rep(0,2)
for (i in c(1:2)) {
z[i] <-mean(y[i,])
}
z<-rep(0,2)
for (i in c(1:2)) {
z[i] <- mean(y[i,])
}
apply(y, 1, mean)
for (j in 1:5) {
for (i in 1:length(bankAccounts)) {bankAccounts[i] <- bankAccounts[i] + income[i] - Expenses[i] }
}
bankAccounts
bankAccounts <- c(10, 9.2, 5.6);
interestRate <- 0.0525;
house <- c(4.8, 3.8, 5.7);
food<- c(3.5, 4.3, 5.0);
fun <- c(7.8, 2.1, 10.5);
income <- c(21, 21, 21)
for (j in 1:5) {
for (i in 1:length(bankAccounts)) {
bankAccounts[i] <- bankAccounts[i] + income[i] - house[i] - fun[i] - food[i]
bankAccounts[i] <- bankAccounts[i] + bankAccounts[i]*interestRate
}
}
bankAccounts
setwd(~/Users/documents/Github/bootcamp-2016/AnalyzesSNPData.2016.student.R)
setwd(/Users/documents/Github/bootcamp-2016/AnalyzesSNPData.2016.student.R)
setwd(/Users/Phuong/documents/Github/bootcamp-2016/AnalyzesSNPData.2016.student.R)
pwd
setwd("~/GitHub/bootcamp-2016/.RData")
# Load a data set
snpsDataFrame=read.table('hapmaps.txt',header=TRUE)
getwd()
list.files()
snpsDataFrame=read.table('hapmaps.txt',header=TRUE)
testSNP==1
table(testSNP)
dim(snpsDataFrame)
head(snpsDataFrame)
names(snpsDataFrame)
row.names(snpsDataFrame)
snps=as.matrix(snpsDataFrame)
testSNP=snps
table(testSNP)
het=sum(testSNP==1)/length(testSNP)
testSNP=snps
table(testSNP)
testSNP==1
length(testSNP)
is.na(testSNP)
het=sum(testSNP==1)/length(testSNP)
het=sum(testSNP==1,na.rm=TRUE)/sum(!is.na(testSNP))
sum(!is.na(testSNP)
sum(!is.na(testSNP))
table(testSNP)
testSNP==1
length(testSNP)
is.na(testSNP)
het=sum(testSNP==1,na.rm=TRUE)/sum(!is.na(testSNP))
het
calc_freq=function(x){
return(sum(x,na.rm=TRUE)/(2.0*sum(!is.na(x))))
}
freq=sum(testSNP,na.rm=TRUE)/(2.0*sum(!is.na(testSNP)))
calc_freq=function(x){
return(sum(x,na.rm=TRUE)/(2.0*sum(!is.na(x))))
}
calc_het=function(x){
return(sum(x==1,na.rm=TRUE)/(sum(!is.na(x))))
}
calc_het
freq=apply(snps,1,calc_freq)
freq
length(freq)
plot(freq,het,xlab="Frequency",ylab="Heterozygosity")
het=apply(snps,1,calc_het)
plot(freq,het,xlab="Frequency",ylab="Heterozygosity")
p=seq(0,0.5,by=0.05)
points(p,2*p*(1-p),type="l",col=2)
points(p,2*p*(1-p),type="l",col=2,lwd= 10) # Plot the HW expectation as a line in red
points(p,2*p*(1-p),type="l",col=2,lwd= 5)
points(p,2*p*(1-p),type="l",col=2)
compute_chisquare=function(x){
freq=sum(x,na.rm=TRUE)/(2.0*sum(!is.na(x))) #minor allele frequency
cnt0=sum(x==0,na.rm=TRUE)
cnt1=sum(x==1,na.rm=TRUE)
cnt2=sum(x==2,na.rm=TRUE)
obscnts=c(cnt0,cnt1,cnt2)
#print(obscnts)
n=sum(obscnts)
expcnts=c((1-freq)^2,2*freq*(1-freq),freq^2)*n #mult by n to turn into counts since the numbers were in counts
chisq=sum((obscnts-expcnts)^2/expcnts)
return(chisq)
}
chisqs=apply(snps,1,compute_chisquare)
pvals=pchisq(chisqs,1,lower.tail=FALSE)
hist(pvals)
signifthres<-0.05
sum(pvals<signifthres)
mean(pvals<signifthres)
sig_snps<-subset(pvals,pvals<0.05)
sig_snp_ids<-names(sig_snps)
sig_snp_ids
sig_geno<-snps[sig_snp_ids,]
sig_geno<-snps[sig_snp_ids,]
sig_geno<-snps[sig_snp_ids,]
sig_geno
house <- c(4.8, 3.8, 5.7);
food<- c(3.5, 4.3, 5.0);
fun <- c(7.8, 2.1, 10.5);
income <- c(21, 21, 21);
years <-c(2015:2020)
years
years <-c(2015:2020)
years
rm(list=ls())
graphics.off()
# Load libraries
library('igraph') # library for network analysis
# load data
iris=iris # this data is already in the computer's memory, but this line will show it in y
View(iris)
head(iris)
unique(iris$Species)
setosa=iris[iris$Species=='setosa',]
setosa=iris[iris$Species=='setosa',]
virginica=iris[iris$Species=='virginica',]
virginica=iris[iris$Species=='virginica',]
windows()
par(mar=c(4, 4, 3, 2))
?$
boxplot(setosa$Sepal.Length, virginica$Sepal.Length, # the data to plot
names=c('Setosa','Virginica'),ylab="Sepal Length", # label the axes
col=c("hotpink", "plum"), # set the colors of the boxplots
las=1, # set the numbers on the axis so that they are upright
cex.axis=1.5,cex.lab=1.5)
boxplot(setosa$Sepal.Length, virginica$Sepal.Length, # the data to plot
names=c('Setosa','Virginica'),ylab="Sepal Length", xlab= "species," # label the axes
col=c("hotpink", "plum"), # set the colors of the boxplots
las=1, # set the numbers on the axis so that they are upright
cex.axis=1.5,cex.lab=1.5)
boxplot(setosa$Sepal.Length, virginica$Sepal.Length, # the data to plot
names=c('Setosa','Virginica'),ylab="Sepal Length", xlab="species," # label the axes
col=c("hotpink", "plum"), # set the colors of the boxplots
las=1, # set the numbers on the axis so that they are upright
cex.axis=1.5,cex.lab=1.5)
windows() # opens the figure in a new window. use the command quartz() for macs
par(mar=c(4, 4, 3, 2)) # set the margins
boxplot(setosa$Sepal.Length, virginica$Sepal.Length, # the data to plot
names=c('Setosa','Virginica'),ylab="Sepal Length", xlab="species",  # label the axes
col=c("hotpink", "plum"), # set the colors of the boxplots
las=1, # set the numbers on the axis so that they are upright
cex.axis=1.5,cex.lab=1.5)
t.test(setosa$Sepal.Length, virginica$Sepal.Length)
ttest-t.test(setosa$Sepal.Length, virginica$Sepal.Length)
ttest=t.test(setosa$Sepal.Length, virginica$Sepal.Length)
ttest$p.value
ttest$conf.int
boxplot(setosa$Petal.Length, virginica$Petal.Length,
names=c('Setosa','Virginica'),ylab="Petal Length", xlab="species",
col=c("orchid", "mullberry"), # set the colors of the boxplots
las=1, # set the numbers on the axis so that they are upright
cex.axis=1.5,cex.lab=1.5)
windows() # opens the figure in a new window. use the command quartz() for macs
par(mar=c(4, 4, 3, 2)
windows() # opens the figure in a new window. use the command quartz() for macs
par(mar=c(4, 4, 3, 2))
names=c('Setosa','Virginica'),ylab="Sepal Length", xlab="species",  # label the axes
col=c("hotpink", "plum"), # set the colors of the boxplots
las=1, # set the numbers on the axis so that they are upright
cex.axis=1.5,cex.lab=1.5)
windows() # opens the figure in a new window. use the command quartz() for macs
par(mar=c(4, 4, 3, 2)) # set the margins
boxplot(setosa$Petal.Length, virginica$Petal.Length, # the data to plot
names=c('Setosa','Virginica'),ylab="Sepal Length", xlab="species",  # label the axes
col=c("hotpink", "plum"), # set the colors of the boxplots
las=1, # set the numbers on the axis so that they are upright
cex.axis=1.5,cex.lab=1.5)
windows() # opens the figure in a new window. use the command quartz() for macs
par(mar=c(4, 4, 3, 2)) # set the margins
boxplot(setosa$Petal.Length, virginica$Petal.Length, # the data to plot
names=c('Setosa','Virginica'),ylab="Sepal Length", xlab="species",  # label the axes
col=c("purple", "orchid"), # set the colors of the boxplots
las=1, # set the numbers on the axis so that they are upright
cex.axis=1.5,cex.lab=1.5)
windows() # open a new figure window
plot(iris$Species, iris$Sepal.Length, # data to plot
ylab="Sepal Length", # label axes
col=c("hotpink", "plum", "cornflowerblue"), las=1, cex.axis=1.5,cex.lab=1.5) # make figure pretty
plot(iris$Species, iris$Sepal.Length, # data to plot
ylab="Sepal Length", xlab="Species"# label axes
col=c("hotpink", "plum", "cornflowerblue")
plot(iris$Species, iris$Sepal.Length, # data to plot
ylab="Sepal Length", xlab="Species", # label axes
col=c("hotpink", "plum", "cornflowerblue"),
windows() # open a new figure window
plot(iris$Species, iris$Sepal.Length, # data to plot
ylab="Sepal Length", xlab="Species", # label axes
col=c("hotpink", "plum", "cornflowerblue"), las=1, cex.axis=1.5,cex.lab=1.5) # make figure pretty
anova1=aov(iris$Sepal.Length~iris$Species)
windows() # open a new figure window
plot(iris$Species, iris$Sepal.Length, # data to plot
ylab="Sepal Length",  # label axes
col=c("hotpink", "plum", "cornflowerblue"), las=1, cex.axis=1.5,cex.lab=1.5) # make figure pretty
anova1=aov(iris$Sepal.Length~iris$Species) # set up the statistical test
summary(anova1) # look at the results of the statistical test
TukeyHSD(anova1) # examine each pair using a Tukey test
windows() # open a new figure window
plot(iris$Species, iris$Sepal.Length,ylab="Sepal Length", # data to plot and label axes
ylim=c(4,10), # set the y limits to make space for stats test results
col=c("hotpink", "plum", "cornflowerblue"), las=1, cex.axis=1.5,cex.lab=1.5)
text(c(1,2,3),c(9,9,9), # set the location of the letters (x, y)
c('A','B','C'), # set which letters to display  on the plot
cex=2)
legend(2,10, # set the location x, y
unique(iris$Species), # text to display
text.col=c("hotpink", "plum", "cornflowerblue"), #text color
bty ='n')
points(c(1,2,3),c(9,9,9), # location of circles
cex=10)
windows() # set a new figure
plot(iris$Petal.Length,iris$Sepal.Length, # data to plot
xlab='Petal length',ylab='Sepal length', # label your axes
pch=16,las=1,cex.axis=1.5,cex.lab=1.5) #
cor.test(iris$Petal.Length,iris$Sepal.Length)
cols=sub('setosa',"hotpink",iris$Species)
cols=sub('versicolor',"plum",cols)
cols=sub('virginica',"cornflowerblue",cols)
cols
windows()
plot(iris$Petal.Length,iris$Sepal.Length, xlab='Petal length',ylab='Sepal length', # same as above...
col=cols, # add color
pch=16,las=1,cex.axis=1.5,cex.lab=1.5) # same as above
# add a legend:
legend("topleft", legend=unique(iris$Species), text.col=c("hotpink", "plum", "cornflowerblue"),pch=16, col=c("hotpink", "plum", "cornflowerblue"))
fit_with_sp=lm(Sepal.Length ~ Petal.Length + Species - 1, data=iris)
summary(fit_with_sp)
fit_with_sp_with_int=lm(Sepal.Length ~ Petal.Length * Species - 1, data=iris)
summary(fit_with_sp_with_int)
plot(iris, col=cols2, pch=16)
windows()
plot(iris, col=cols2, pch=16)
fit_with_sp_with_int=lm(Sepal.Length ~ Petal.Length * Species - 1, data=iris)
summary(fit_with_sp_with_int)
windows()
plot(iris, col=cols2, pch=16)
windows()
plot(iris$Petal.Length,iris$Sepal.Length, xlab='Petal length',ylab='Sepal length',pch=16, # same as above...
col=rainbow(max(iris$Petal.Length)*10)[iris$Petal.Le
)
windows()
plot(iris$Petal.Length,iris$Sepal.Length, xlab='Petal length',ylab='Sepal length',pch=16, # same as above...
col=rainbow(max(iris$Petal.Length)*10)[iris$Petal.Length*10])
windows()
plot(iris$Petal.Length,iris$Sepal.Width, xlab='Petal length',ylab='Sepal width', # same as above...
col=cols, # add color
pch=16,las=1,cex.axis=1.5,cex.lab=1.5) # same as above
# add a legend:
legend("topleft", legend=unique(iris$Species), text.col=c("hotpink", "plum", "cornflowerblue"),pch=16, col=c("hotpink", "plum", "cornflowerblue"))
fit_with_sp=lm(Sepal.Width ~ Petal.Length + Species - 1, data=iris)
summary(fit_with_sp)
fit_with_sp_with_int=lm(Sepal.Width ~ Petal.Length * Species - 1, data=iris)
summary(fit_with_sp_with_int)
fit_with_sp=lm(Sepal.Width ~ Petal.Length + Species - 1, data=iris)
summary(fit_with_sp)
house <- c(4.8, 3.8, 5.7);
food<- c(3.5, 4.3, 5.0);
fun <- c(7.8, 2.1, 10.5);
income <- c(21, 21, 21);
years <-c(2015:2020)
for (j in 1:5) {
for (i in 1:length(bankAccounts)) {
bankAccounts[i] <- bankAccounts[i] + income[i] - house[i] - fun[i] - food[i]
bankAccounts[i] <- bankAccounts[i] + bankAccounts[i]*interestRate
for (k in 1:length(years)) {
if (years %% 2!= 0) {
bankAccounts[1] <- bankAccounts[1] +5000;
bankAccounts[3] <- bankAccounts[3] +5000}
}
}
bankAccounts
)
house <- c(4.8, 3.8, 5.7);
food<- c(3.5, 4.3, 5.0);
fun <- c(7.8, 2.1, 10.5);
income <- c(21, 21, 21);
years <-c(2015:2020)
for (j in 1:5) {
for (i in 1:length(bankAccounts)) {
bankAccounts[i] <- bankAccounts[i] + income[i] - house[i] - fun[i] - food[i]
bankAccounts[i] <- bankAccounts[i] + bankAccounts[i]*interestRate
for (k in 1:length(years)) {
if (years %% 2!= 0) {
bankAccounts[1] <- bankAccounts[1] +5000;
bankAccounts[3] <- bankAccounts[3] +5000}
}
}
}
bankAccounts <- c(10, 9.2, 5.6);
house <- c(4.8, 3.8, 5.7);
food<- c(3.5, 4.3, 5.0);
fun <- c(7.8, 2.1, 10.5);
income <- c(21, 21, 21);
years <-c(2015:2020)
for (j in 1:5) {
for (i in 1:length(bankAccounts)) {
bankAccounts[i] <- bankAccounts[i] + income[i] - house[i] - fun[i] - food[i]
bankAccounts[i] <- bankAccounts[i] + bankAccounts[i]*interestRate
for (k in 1:length(years)) {
if (years %% 2!= 0) {
bankAccounts[1] <- bankAccounts[1] +5000;
bankAccounts[3] <- bankAccounts[3] +5000}
}
}
}
bankAccounts <- c(10, 9.2, 5.6);
interestRate <- 0.0525;
house <- c(4.8, 3.8, 5.7);
food<- c(3.5, 4.3, 5.0);
fun <- c(7.8, 2.1, 10.5);
income <- c(21, 21, 21);
years <-c(2015:2020)
for (j in 1:5) {
for (i in 1:length(bankAccounts)) {
bankAccounts[i] <- bankAccounts[i] + income[i] - house[i] - fun[i] - food[i]
bankAccounts[i] <- bankAccounts[i] + bankAccounts[i]*interestRate
for (k in 1:length(years)) {
if (years %% 2!= 0) {
bankAccounts[1] <- bankAccounts[1] +5000;
bankAccounts[3] <- bankAccounts[3] +5000}
}
}
}
for (j in 1:5) {
for (i in 1:length(bankAccounts)) {
bankAccounts[i] <- bankAccounts[i] + income[i] - house[i] - fun[i] - food[i]
bankAccounts[i] <- bankAccounts[i] + bankAccounts[i]*interestRate
for (k in 1:length(years)) {
if (years %% 2!= 0) {
bankAccounts[1] <- bankAccounts[1] +5000;
bankAccounts[3] <- bankAccounts[3] +5000}
}
}
}
bankAccounts
bankAccounts <- c(10, 9.2, 5.6);
interestRate <- 0.0525;
house <- c(4.8, 3.8, 5.7);
food<- c(3.5, 4.3, 5.0);
fun <- c(7.8, 2.1, 10.5);
income <- c(21, 21, 21);
years <-c(2015:2020)
for (j in 1:5) {
for (i in 1:length(bankAccounts)) {
bankAccounts[i] <- bankAccounts[i] + income[i] - house[i] - fun[i] - food[i]
bankAccounts[i] <- bankAccounts[i] + bankAccounts[i]*interestRate
for (k in 1:length(years)) {
if (years %% 2!= 0) {
bankAccounts[1] <- bankAccounts[1] +5000;
bankAccounts[3] <- bankAccounts[3] +5000}
}
}
}
warnings()
years %% 2 != 0
years
bankAccounts <- c(10, 9.2, 5.6);
interestRate <- 0.0525;
house <- c(4.8, 3.8, 5.7);
food<- c(3.5, 4.3, 5.0);
fun <- c(7.8, 2.1, 10.5);
income <- c(21, 21, 21);
years <-c(2015:2020)
for (j in 1:length(years)) {
for (i in 1:length(bankAccounts)) {
bankAccounts[i] <- bankAccounts[i] + income[i] - house[i] - fun[i] - food[i]
bankAccounts[i] <- bankAccounts[i] + bankAccounts[i]*interestRate
if (years[j] %% 2!= 0) {
bankAccounts[1] <- bankAccounts[1] +5000;
bankAccounts[3] <- bankAccounts[3] +5000}
}
}
}
bankAccounts <- c(10, 9.2, 5.6);
interestRate <- 0.0525;
house <- c(4.8, 3.8, 5.7);
food<- c(3.5, 4.3, 5.0);
fun <- c(7.8, 2.1, 10.5);
income <- c(21, 21, 21);
years <-c(2015:2020)
for (j in 1:length(years)) {
for (i in 1:length(bankAccounts)) {
bankAccounts[i] <- bankAccounts[i] + income[i] - house[i] - fun[i] - food[i]
bankAccounts[i] <- bankAccounts[i] + bankAccounts[i]*interestRate
if (years[j] %% 2!= 0) {
bankAccounts[1] <- bankAccounts[1] +5000;
bankAccounts[3] <- bankAccounts[3] +5000}
}
}
bankAccounts
bankAccounts <- c(10, 9.2, 5.6);
interestRate <- 0.0525;
house <- c(4.8, 3.8, 5.7);
food<- c(3.5, 4.3, 5.0);
fun <- c(7.8, 2.1, 10.5);
income <- c(21, 21, 21);
years <-c(2015:2020)
for (j in 1:length(years)) {
for (i in 1:length(bankAccounts)) {
bankAccounts[i] <- bankAccounts[i] + income[i] - house[i] - fun[i] - food[i]
bankAccounts[i] <- bankAccounts[i] + bankAccounts[i]*interestRate
if (years[j] %% 2!= 0) {
bankAccounts[1] <- bankAccounts[1] +5;
bankAccounts[3] <- bankAccounts[3] +5}
}
}
bankAccounts
xsum <-0
x<- 1
xsum <-0
x<- 1
while(n <=17) {
(xsum=x+1) x=x+1
}
nsum <-0
n<- 1
while(n <=17) {
(xsum=n+1) x=x+1
}
nsum <-0
n <- 1
while(n <=17) {
(xsum=n+1)
}
nsum <-0
n <-1
while(n >= 17) {
nsum=nsum+n
n=n+1
}
nsum
nsum <-0
n <-1
while(n <= 17) {
nsum=nsum+n
n=n+1
}
nsum
if (n <= -1) cat "small"
if (n <= -1) {cat "small"}
for (n in 1:10){
if (n <= -1) {cat "small"}
if (n == in -1:1) {cat "medium"}
if (n >= 1) {cat "big"}
}
for (n in 1:10){
if (n <= -1) {cat (n, "small")}
if (n == in -1:1) {cat (n, "medium")}
if (n >= 1) {cat (n, "big")}
}
for (n in 1:10){
if (n <= -1) {cat (n, "small")}
if (n >= 1) {cat (n, "big")}
}
function(n){
if (n <= -1) {cat ("small")}
if (n >= 1) {cat ("big")}
}
printnumber <- function(n){
if (n <= -1) {cat ("small")}
if (n >= 1) {cat ("big")}
}
printnumber(-3)
printnumber <- function(n){
if (n <= -1) {cat ("small")}
if (n >= 1) {cat ("big")}
else {cat ("medium")}
}
printnumber(0)
