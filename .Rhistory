freq=sum(x,na.rm=TRUE)/(2.0*sum(!is.na(x))) #minor allele frequency
cnt0=sum(x==0,na.rm=TRUE)
cnt1=sum(x==1,na.rm=TRUE)
cnt2=sum(x==2,na.rm=TRUE)
obscnts=c(cnt0,cnt1,cnt2)
#print(obscnts)
n=sum(obscnts)
expcnts=c((1-freq)^2,2*freq*(1-freq),freq^2)*n #mult by n to turn into counts since the numbers were in counts
chisq=sum((obscnts-expcnts)^2/expcnts)
return(chisq)
}
#let's make a second funtion that makes use of R's built in chisq.test function
compute_chisquare_2=function(x){
freq=sum(x,na.rm=TRUE)/(2.0*sum(!is.na(x)))
cnt0=sum(x==0,na.rm=TRUE)
cnt1=sum(x==1,na.rm=TRUE)
cnt2=sum(x==2,na.rm=TRUE)
obscnts=c(cnt0,cnt1,cnt2)
#print(obscnts)
n=sum(obscnts)
#here we use the built-in function for the chi-sq distribution:
exp_probs=c((1-freq)^2,2*freq*(1-freq),freq^2) #note, here we don't multiply by n
chisq<-chisq.test(obscnts,p=exp_probs, correct = FALSE)$statistic
return(chisq)
}
# Apply the compute_chi_square function to each snp
chisqs=apply(snps,1,compute_chisquare)
chisqs2=apply(snps,1,compute_chisquare_2)
pvals=pchisq(chisqs,1,lower.tail=FALSE)
signifthres<-0.05
sum(pvals<signifthres)/length(pvals)
# proportions of pvalues <0.05 is 181/ total pvals = 0.04509218
signifthres<-0.01
sum(pvals<signifthres)/length(pvals)
#proportion of pvalues <0.01 = 0.01021425
signifthres<-0.001
sum(pvals<signifthres)/length(pvals)
#proportion of pvalues <0.001= 0.00124564
#c.save the number of p-values you have as num_pval
num_pval <- length(pvals)
#d. calc the vector of expected P-values for the chi-square test.
exp_pvals <-rep(0, num_pval)
for (n in 1:length(pvals))
{ exp_pvals[n] <- n/num_pval}
#e. sort P-values
sort_pvals <-sort(pvals, decreasing =FALSE)
#f. find -log10 of observed and expected P-values
log_sort_pvals <- -log10(sort_pvals)
log_exp_pvals <- -log10(exp_pvals)
#g. Plot QQ Plot plotting "log_sort_pvals vs log_exp_pvals
plot(log_exp_pvals, log_sort_pvals,
xlab="-log10(expected P-value)",
ylab= "-log10(expected P-value)"
)
#h. Add diagonal line to QQ plot
abline(0, 1)
#2
ChickWeight=ChickWeight
data <-ChickWeight
data <- within(data, {
chick <- factor(Chick)
diet <- factor(Diet)
time <- factor (Time)
})
datatime0= data[$time==0, ]
plot(weight~diet, data=datatime0)
datatime0= data[$time==0, ]
datatime0= data[data$time==0, ]
plot(weight~diet, data=datatime0)
Anova1= aov(weight~diet, data=datatime0)
summary(Anova1)
?Tukey
TukeyHSD(Anova1)
snpsDataFrame=read.table('hapmaps.txt',header=TRUE)
names(snpsDataFrame)
row.names(snpsDataFrame)
snps=as.matrix(snpsDataFrame)
testSNP=snps["rs218206_G",]
table(testSNP)
het=sum(testSNP==1)/length(testSNP)
testSNP=snps["rs6717613_A",]
table(testSNP)
testSNP==1
length(testSNP)
is.na(testSNP)
het=sum(testSNP==1)/length(testSNP)  # Note how this fails
het=sum(testSNP==1,na.rm=TRUE)/sum(!is.na(testSNP))
freq=sum(testSNP,na.rm=TRUE)/(2.0*sum(!is.na(testSNP)))
calc_freq=function(x){
return(sum(x,na.rm=TRUE)/(2.0*sum(!is.na(x))))
calc_het=function(x){
return(sum(x==1,na.rm=TRUE)/(sum(!is.na(x))))
}
}
?apply
freq=apply(snps,1,calc_freq) #creates a vector with 1 value per SNP
het=apply(snps,1,calc_het)
#applying chi square to the values
compute_chisquare_2=function(x){
freq=sum(x,na.rm=TRUE)/(2.0*sum(!is.na(x)))
cnt0=sum(x==0,na.rm=TRUE)
cnt1=sum(x==1,na.rm=TRUE)
cnt2=sum(x==2,na.rm=TRUE)
obscnts=c(cnt0,cnt1,cnt2)
#print(obscnts)
n=sum(obscnts)
#here we use the built-in function for the chi-sq distribution:
exp_probs=c((1-freq)^2,2*freq*(1-freq),freq^2) #note, here we don't multiply by n
chisq<-chisq.test(obscnts,p=exp_probs, correct = FALSE)$statistic
return(chisq)
}
chisqs=apply(snps,1,compute_chisquare)
pvals=pchisq(chisqs,1,lower.tail=FALSE)
pvals=pchisq(chisqs,1,lower.tail=FALSE)
signifthres<-0.05
sum(pvals<signifthres)/length(pvals)
num_pval <- length(pvals)
exp_pvals <-rep(0, num_pval)
for (n in 1:length(pvals))
{ exp_pvals[n] <- n/num_pval}
sort_pvals <-sort(pvals, decreasing =FALSE)
log_sort_pvals <- -log10(sort_pvals)
log_exp_pvals <- -log10(exp_pvals)
?rnorm
rm(list=ls())
#testing heights of people living in LA
rnorm(h, mean=69, sd=10) #generating normal distribution with average 69 inches and sd 10 inches
#function get_heights to draw a random sample of individuals
get_heights <- function (n) { #function to get random samples and calculate the average of that sample
heights <- rnorm(n, mean=69, sd=10)
mean (heights)
}
get_heights(100)
mean_heights_100 <- rep(1, 1000)
for (k in 1:1000) {
mean_heights_100[k] <- get_heights(100)}
hist(mean_heights_100) #histogrm for mean_heights_100 vector
mean_heights_1000 <- rep(0, 1000)
for (k in 1:1000) {
mean_heights_1000[k] <-get_heights(1000)
}
hist(mean_heights_1000) #histogram for mean_heights_1000 vector
#create so that histograms have the same number of bins
bins <-seq(65, 73, by=0.5)
hist(mean_heights_100, breaks=bins)
counts_100= hist(mean_heights_100, breaks=bins)$counts
counts_1000=hist(mean_heights_1000, breaks=bins)$counts
#how to call up a barplot with both data sets
barplot(
rbind (counts_100, counts_1000),
col=c(2,4),
beside=T,
names.arg = seq(65, 72.5, by=0.5),
xlab="Average Height (inches)",
ylab="count"
)
#sequence at names.arg is 1 less than the sequence length for the "bins" because the number of boundaries is 1 more than the number of counts
legend(
0, 300, c("n=100","n=1000"),fill= c("red", "blue")
)
#running this script should give the plot for exercise 1
ChickWeight=ChickWeight
data <-ChickWeight
data <- within(data, {
chick <- factor(Chick)
diet <- factor(Diet)
time <- factor (Time)
})
datatime0= data[data$time==0, ]
plot(weight~diet, data=datatime0)
datatime0= data[data$time==0, ]
plot(weight~diet, data=datatime0)
Anova1= aov(weight~diet, data=datatime0)
summary(Anova1)
TukeyHSD(Anova1)
datatime21= data[data$time==21, ]
datatime21= data[data$time==21, ]
plot(weight~diet, data= datatime21)
Anova2=aov(weight~diet, data=datatime21)
summary(Anova2)
summary(Anova1)
datatime21= data[data$time==21, ]
plot(weight~diet, data= datatime21)
Anova2=aov(weight~diet, data=datatime21)
summary(Anova2)
TukeyHSD(Anova2)
ChickWeight=ChickWeight
data <-ChickWeight
data <- within(data, {
chick <- factor(Chick)
diet <- factor(Diet)
time <- factor (Time)
})
#1 plot and examine if there is a statistical difference between weight of chicks on day 0
#unify weight by diet day 0
datatime0= data[data$time==0, ]
plot(weight~diet, data=datatime0)
#now you have to examine, use anova
Anova1= aov(weight~diet, data=datatime0)
summary(Anova1)
TukeyHSD(Anova1)
#no significant differences
#2 Plot chick weights to different diet treatments at day 21
datatime21= data[data$time==21, ]
plot(weight~diet, data= datatime21)
#check statistical differences
Anova2=aov(weight~diet, data=datatime21)
summary(Anova2)
#there are significant values for differences in weight based on diet
TukeyHSD(Anova2)
#3 summary(aov (weight~Diet*Time+Error(Chick)data=data))
#4 plotting time by weight
#5 create empty plot to plot lines for each chick
#plot(NA, xlim=c(min value x, max value x), ylim = c (min value of y, max value of y))
#for (ii in 1:50) { use.rows=}
summary(aov(weight~Diet*Time+Error(Chick),data=data))
?plot
plot(as.numeric (data$time), data$weight)
?cols
?sub
ChickWeight=ChickWeight
data <-ChickWeight
data <- within(data, {
chick <- factor(Chick)
diet <- factor(Diet)
time <- factor (Time)
})
#QUESTION 1----- plot and examine if there is a statistical difference between weight of chicks on day 0
#unify weight by diet day 0
datatime0= data[data$time==0, ]
plot(weight~diet, data=datatime0)
#now you have to examine, use anova
Anova1= aov(weight~diet, data=datatime0)
summary(Anova1)
#summary(Anova1)
#             Df Sum Sq Mean Sq F value Pr(>F)
#diet         3   4.32   1.440   1.132  0.346
#Residuals   46  58.50   1.272
TukeyHSD(Anova1)
#Tukey multiple comparisons of means
#95% family-wise confidence level
#Fit: aov(formula = weight ~ diet, data = datatime0)
#$diet
#diff       lwr       upr     p adj
#2-1 -0.7 -1.864187 0.4641869 0.3872164
#3-1 -0.6 -1.764187 0.5641869 0.5219101
#4-1 -0.4 -1.564187 0.7641869 0.7965223
#3-2  0.1 -1.244287 1.4442873 0.9971988
#4-2  0.3 -1.044287 1.6442873 0.9331261
#4-3  0.2 -1.144287 1.5442873 0.9786117
#no significant differences
#QUESTION 2------Plot chick weights to different diet treatments at day 21
datatime21= data[data$time==21, ]
plot(weight~diet, data= datatime21)
#check statistical differences
Anova2=aov(weight~diet, data=datatime21)
summary(Anova2)
#summary(Anova2)
#Df Sum Sq Mean Sq F value  Pr(>F)
#diet         3  57164   19055   4.655 0.00686 **
#  Residuals   41 167839    4094
#---
#  Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#there are significant values for differences in weight based on diet
TukeyHSD(Anova2)
#Tukey multiple comparisons of means
#95% family-wise confidence level
#Fit: aov(formula = weight ~ diet, data = datatime21)
#$diet
#diff        lwr       upr     p adj
#2-1  36.95000  -32.11064 106.01064 0.4868095
#3-1  92.55000   23.48936 161.61064 0.0046959
#4-1  60.80556  -10.57710 132.18821 0.1192661
#3-2  55.60000  -21.01591 132.21591 0.2263918
#4-2  23.85556  -54.85981 102.57092 0.8486781
#4-3 -31.74444 -110.45981  46.97092 0.7036249
#QUESTION 3--------- summary(aov (weight~Diet*Time+Error(Chick)data=data))
summary(aov(weight~Diet*Time+Error(Chick),data=data))
#Error: Chick
#Df Sum Sq Mean Sq F value   Pr(>F)
#Diet       3 155863   51954   7.221 0.000482 ***
#  Time       1  55175   55175   7.668 0.008197 **
#  Diet:Time  1   2482    2482   0.345 0.559984
#Residuals 44 316586    7195
#---
#  Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#Error: Within
#Df  Sum Sq Mean Sq F value Pr(>F)
#Time        1 1962914 1962914 3049.28 <2e-16 ***
#  Diet:Time   3   84222   28074   43.61 <2e-16 ***
#  Residuals 524  337315     644
#---
#  Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#QUESTION 4-------- plot effects of diet on chick growth
#plotting time by weight and color code diet
plot(as.numeric (data$time), data$weight)
cols= sub('1', "blue", data$diet)
cols= sub('2', "hotpink", cols)
cols- sub('3', "purple", cols)
cols= sub ('4', "green", cols)
#5 create empty plot to plot lines for each chick
#plot(NA, xlim=c(min value x, max value x), ylim = c (min value of y, max value of y))
#for (ii in 1:50) { use.rows=}
plot(as.numeric (data$time), data$weight)
cols= sub('1', "blue", data$diet)
cols= sub('2', "hotpink", cols)
cols- sub('3', "purple", cols)
cols= sub ('4', "green", cols)
plot(as.numeric (data$time), data$weight)
cols= sub('1', "blue", data$diet)
cols= sub('2', "hotpink", cols)
cols= sub('3', "purple", cols)
cols= sub ('4', "green", cols)
plot(as.numeric (data$time), data$weight, pch=19)
cols= sub('1', "blue", data$diet)
cols= sub('2', "hotpink", cols)
cols= sub('3', "purple", cols)
cols= sub ('4', "green", cols)
plot(as.numeric(
data$time), data$weight,
xlab= 'time', ylab= 'weight', main= "Effect of Diet on ChiCkWeight"
col=cols, #adding color to the scale
pch=19, las=1, cex.axis=1.5, cex.lab=1.5#pch 19 colors in circles
)#pch19 colors in circles)
?xlab
?plot
plot(as.numeric(
data$time), data$weight,
xlab= 'time', ylab= 'weight', main= "Effect of Diet on ChiCkWeight",
col=cols, #adding color to the scale
pch=19, las=1, cex.axis=1.5, cex.lab=1.5#pch 19 colors in circles
)#pch19 colors in circles)
plot(as.numeric(
data$time), data$weight,
xlab= 'time', ylab= 'weight', main= "Effect of Diet on ChiCkWeight",
col=cols, #adding color to the scale
pch=19, #pch 19 colors in circles
)
plot(as.numeric(
data$time), data$weight,
xlab= 'time', ylab= 'weight', main= "Effect of Diet on ChiCkWeight",
col=cols, #adding color to the scale
pch=19, las=1, cex.axis=1.5, cex.lab=1.5#pch 19 colors in circles
)
plot(as.numeric(
data$time), data$weight,
xlab= 'time', ylab= 'weight', main= "Effect of Diet on ChiCkWeight",
col=cols, #adding color to the scale
pch=19, cex.axis=1.5, cex.lab=1.5#pch 19 colors in circles
)
?plot
plot(as.numeric(
data$time), data$weight,
xlab= 'time', ylab= 'weight', main= "Effect of Diet on ChiCkWeight"#overall title,
col=cols, #adding color to the scale
pch=19, las=1, cex.axis=1.5, cex.lab=1.5#pch 19 colors in circles
)#pch19 colors in circles)
legend (
"topleft", title="Diet",
legend=unique(data$diet),
text.col= c("blue", "hotpink", "purple", "green")
)
plot(as.numeric(
data$time), data$weight,
xlab= 'time', ylab= 'weight', main= "Effect of Diet on ChiCkWeight",
col=cols, #adding color to the scale
pch=19, las=1, cex.axis=1.5, cex.lab=1.5#pch 19 colors in circles
)
legend (
"topleft", title="Diet",
legend=unique(data$diet),
text.col= c("blue", "hotpink", "purple", "green")
)
ChickWeight=ChickWeight
data <-ChickWeight
data <- within(data, {
chick <- factor(Chick)
diet <- factor(Diet)
time <- factor (Time)
})
#QUESTION 1----- plot and examine if there is a statistical difference between weight of chicks on day 0
#unify weight by diet day 0
datatime0= data[data$time==0, ]
plot(weight~diet, data=datatime0)
#now you have to examine, use anova
Anova1= aov(weight~diet, data=datatime0)
summary(Anova1)
#summary(Anova1)
#             Df Sum Sq Mean Sq F value Pr(>F)
#diet         3   4.32   1.440   1.132  0.346
#Residuals   46  58.50   1.272
TukeyHSD(Anova1)
#Tukey multiple comparisons of means
#95% family-wise confidence level
#Fit: aov(formula = weight ~ diet, data = datatime0)
#$diet
#diff       lwr       upr     p adj
#2-1 -0.7 -1.864187 0.4641869 0.3872164
#3-1 -0.6 -1.764187 0.5641869 0.5219101
#4-1 -0.4 -1.564187 0.7641869 0.7965223
#3-2  0.1 -1.244287 1.4442873 0.9971988
#4-2  0.3 -1.044287 1.6442873 0.9331261
#4-3  0.2 -1.144287 1.5442873 0.9786117
#no significant differences
#QUESTION 2------Plot chick weights to different diet treatments at day 21
datatime21= data[data$time==21, ]
plot(weight~diet, data= datatime21)
#check statistical differences
Anova2=aov(weight~diet, data=datatime21)
summary(Anova2)
#summary(Anova2)
#Df Sum Sq Mean Sq F value  Pr(>F)
#diet         3  57164   19055   4.655 0.00686 **
#  Residuals   41 167839    4094
#---
#  Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#there are significant values for differences in weight based on diet
TukeyHSD(Anova2)
#Tukey multiple comparisons of means
#95% family-wise confidence level
#Fit: aov(formula = weight ~ diet, data = datatime21)
#$diet
#diff        lwr       upr     p adj
#2-1  36.95000  -32.11064 106.01064 0.4868095
#3-1  92.55000   23.48936 161.61064 0.0046959
#4-1  60.80556  -10.57710 132.18821 0.1192661
#3-2  55.60000  -21.01591 132.21591 0.2263918
#4-2  23.85556  -54.85981 102.57092 0.8486781
#4-3 -31.74444 -110.45981  46.97092 0.7036249
#QUESTION 3--------- summary(aov (weight~Diet*Time+Error(Chick)data=data))
summary(aov(weight~Diet*Time+Error(Chick),data=data))
#Error: Chick
#Df Sum Sq Mean Sq F value   Pr(>F)
#Diet       3 155863   51954   7.221 0.000482 ***
#  Time       1  55175   55175   7.668 0.008197 **
#  Diet:Time  1   2482    2482   0.345 0.559984
#Residuals 44 316586    7195
#---
#  Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#Error: Within
#Df  Sum Sq Mean Sq F value Pr(>F)
#Time        1 1962914 1962914 3049.28 <2e-16 ***
#  Diet:Time   3   84222   28074   43.61 <2e-16 ***
#  Residuals 524  337315     644
#---
#  Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#QUESTION 4-------- plot effects of diet on chick growth
#plotting time by weight and color code diet
plot(as.numeric (data$time), data$weight, pch=19)
cols= sub('1', "blue", data$diet)#setting up the colors to diet coding
cols= sub('2', "hotpink", cols)
cols= sub('3', "purple", cols)
cols= sub ('4', "green", cols)
#currently if ploted, everything is in black
#figure out how to plot in color
plot(as.numeric(
data$time), data$weight,
xlab= 'time', ylab= 'weight', main= "Effect of Diet on ChiCkWeight",
col=cols, #adding color to the scale
pch=19, las=1, cex.axis=1.5, cex.lab=1.5#pch 19 colors in circles
) #pch19 colors in circles
legend (
"topleft", title="Diet",
legend=unique(data$diet),
text.col= c("blue", "hotpink", "purple", "green")
)
#5 create empty plot to plot lines for each chick
#plot(NA, xlim=c(min value x, max value x), ylim = c (min value of y, max value of y))
#for (ii in 1:50) { use.rows=}
plot(NA, ylim=c(0,370), xlim=c(0,21), xlab="Time", ylab="Weight", main="Individual Chick Growth Over Time")
colors=rainbow(50)
for(ID in 1:50) {
use.rows=which(data$Chick == ID)
lines(x=data$Time[use.rows],
y=data$weight[use.rows], col=colors[ID])
}
for(c in 1:50) {
use.rows=which(data$Chick == c)
lines(x=data$Time[use.rows],
y=data$weight[use.rows], col=colors[c])
}
zz= read.table ('phenotypes.txt', header=TRUE)
read.table ('phenotypes.txt', header=TRUE)
quantile(zz, 0.25)
zz= read.table ('phenotypes.txt', header=TRUE)
quantile(zz, 0.25)
zzmatrix=as.matrix(zz)
quantile(zzmatrix, 0.25)
zzmatrix=as.matrix(zz) #turn into matrix because error in data frame columns if keep as dataframe
quantile(zzmatrix, 0.75)
zz <- read.table ('phenotypes.txt', header=TRUE)
quantile(zz, 0.75)
zzmatrix=as.matrix(zz)
quantile(zz, 0.75)
quantile(zzmatrix, 0.75)
quantile(zz$glucose_mmolperL, 0.75)
quantile(zz$glucose_mmolperL, 0.25)
?hist
hist(
zz$glucose_mmolperL,
xlab= "glucose levels (mm/L)", main= "Density plot of Glucose level phenotypes")
hist(
zz$glucose_mmolperL,
xlab= "glucose levels (mm/L)", main= "Density plot of Glucose level phenotypes"
)
abline(v=quantile(zz$glucose_mmolperL, 0.75), col= "blue" )
hist(
zz$glucose_mmolperL,
xlab= "glucose levels (mm/L)", main= "Density plot of Glucose level phenotypes"
)
abline(v=quantile(zz$glucose_mmolperL, 0.25), col= "red")
abline(v=quantile(zz$glucose_mmolperL, 0.75), col= "blue" )
