{
    "collab_server" : "",
    "contents" : "#Exercise 1 Loop statement to generate 8 \\n ending in an \"*\" on the next line\nlol <- 1:9\nlol\nfor (lol in 1:9){\n  cat(\"\\n\") \n  if (lol ==9) {\n    cat (\"*\")\n    }\n  }\n\n\n\n  #Exercise 2 modified loop printing 10 asterisks with each asterisk separated by one (&) with no spaces or new line characters\nfor (lol in 1:9){\n    cat (\"*\")\n  if (lol != 9) {cat (\"&\")\n    }\n  }\n\n\n\n# Exercise 3 by hand, figure out the initial values of these variables and values at the the start and end of each iteration of the loop\ndogs <- 10;\nfor (i in 1:5){\n  dogs <- dogs + 1; \n}\n#Answerstyle= iteration number = initial value, end value\n#1st iteration= 10, 11;2nd iteration= 11, 12; 3rd iteration=12, 13; 4th iteration= 13, 14; 5th iteration=14, 15\n\nmeatloaf <- 0; \nfor (i in 5:9){\n  meatloaf <- meatloaf - i + 1;\n  cat(meatloaf) \n  #answer style= iteration # (i= number)= start value, end value\n#1st iteration (i==5)= 0, -4; \n#2nd iteration (i==6)= -4, --9; \n#3rd iteration (i==7)=-9, -15; \n#4th iteration (i==8)= -15,-22; \n#5th iteration (i==9)=-22, -30\n  \n  bubbles <- 12;\n  for (i in -1:-4){\n    bubbles <- i;\n  }\n  #answer style= iteration number= start  value, end value\n#1st iteration = 12, -1\n  #2nd iteration= -1, -2\n  #3rd iteration = -2, -3\n  #4th iteration= -3, -4\n  \n  \n  \n  #exercise 4 modify this code so that it will print out a message during presidential as well as congressional election years\n  \n  ###you can use the if statement with the modulus operator to conditionally perform operations\n  years <- c( 2015, 2016, 2018, 2020, 2021)\n  for(ii in 1:length(years)){\n    if(years[ii] %% 2 == 0){\n      cat(years[ii], 'Hooray, congressional elections!', sep = '\\t', fill = T)\n    }\n    if(years [ii] %% 4 ==0){\n      cat (years[ii], 'Oh great, presidential elections...', sep ='\\t', fill = T)\n    }\n    \n  }\n  \n  \n  \n  \n  #exercise 5 modify this loop so that the loop will compund the interest?\n  bankAccounts <- c(10, 9.2, 5.6, 3.7, 8.8, 0.5);\n  compounded <- rep(NA, 6)\n  interestRate <- 0.0125;\n  for (i in 1:length(bankAccounts)) {\n    compounded[i] <- interestRate*bankAccounts[i] + bankAccounts[i]; }\n  \n  compounded\n  \n  \n  \n  \n  \n  #exercise 6 we now want to compound the interest annually, but across a period of 5 years. The for loop we discussed earlier only compounds for a single year. Try this:\n  \n  \n  bankAccounts <- c(10, 9.2, 5.6);\n  interestRate <- 0.0525;   \n  house <- c(4.8, 3.8, 5.7); \n  food<- c(3.5, 4.3, 5.0);  \n  fun <- c(7.8, 2.1, 10.5);  \n  \n  income <- c(21, 21, 21); \n  \n\n  for (j in 1:5) {\n    for (i in 1:length(bankAccounts)) {\n      bankAccounts[i] <- bankAccounts[i] + income[i] - house[i] - fun[i] - food[i]\n      bankAccounts[i] <- bankAccounts[i] + bankAccounts[i]*interestRate\n      }\n  }\n  bankAccounts\n  \n  \n  \n  \n  #exercise 7 modified 5-year interest-compounding code from 2015-2020 and odd numbered years, students 1 and 3 get trust fund disbursements of $5000\n  bankAccounts <- c(10, 9.2, 5.6);\n  interestRate <- 0.0525;\n  house <- c(4.8, 3.8, 5.7); \n  food<- c(3.5, 4.3, 5.0); \n  fun <- c(7.8, 2.1, 10.5);\n  income <- c(21, 21, 21);\n  years <-c(2015:2020)\n  \n  for (j in 1:length(years)) {\n    for (i in 1:length(bankAccounts)) {\n      bankAccounts[i] <- bankAccounts[i] + income[i] - house[i] - fun[i] - food[i]\n      bankAccounts[i] <- bankAccounts[i] + bankAccounts[i]*interestRate\n        if (years[j] %% 2!= 0) {\n          bankAccounts[1] <- bankAccounts[1] +5;\n          bankAccounts[3] <- bankAccounts[3] +5}\n      }\n  }\n  bankAccounts\n  \n  \n  \n  #exercise 8 use a while loop to sum all numbers from 1:17. You will need to use a counter variable (like index seen in class).\n  nsum <-0\nn <-1\n  while(n <= 17) {\n    nsum=nsum+n\n    n=n+1\n  }\n\n\n#exercise 9 write a function takes a number, and prints ‘small’ if number less than or equal to -1; ‘medium’ if between -1 and + 1’big’ if greater than or equal to + 1\n\nprintsize <- function(n){\n  if (n <= -1) {cat (\"small\")}\n  if (n >= 1) {cat (\"big\")}\n  else {cat (\"medium\")}\n}\nprintsize(0)",
    "created" : 1473973771021.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "116482297",
    "id" : "839F2EED",
    "lastKnownWriteTime" : 1473973263,
    "last_content_update" : 1473973263,
    "path" : "~/GitHub/bootcamp-2016/PV_BootcampExercise1.R",
    "project_path" : "PV_BootcampExercise1.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}